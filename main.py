import os
import re
import time
import uuid

import telebot
from telebot.types import LabeledPrice
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

import db.db_init as dbmanager
from models.Flight import Flight
from models.Seat import Seat
from models.SeatModel import SeatModel
from models.Ticket import Ticket
from models.User import User
from models.UserInfo import UserInfo
from service.choose_seat_state import ChooseSeatState
from service.ticket_service import TicketService
from service.chat_cache import ChatCache
from service.flight_service import FlightService
from service.seat_service import SeatService
from service.user_info_service import UserInfoService
from service.user_service import UserService
from service.user_ticket_service import UserTicketService
from util.utils import get_personal_data_menu, get_main_menu, START, HELP, MAIN_MENU, PERSONAL_DATA_MENU, SUPPORT, \
    CREATE_PERS_DATA, EDIT_GENDER, get_simple_question_marcup_with_text, \
    get_save_pers_data_menu, SAVE_PERS_DATA, get_param_from_command, SEE_PERS_DATA, EDIT_PERS_DATA, \
    PRE_SAVE_EDIT_PERS_DATA, get_edit_personal_data_menu, EDIT_NAME, FIELD_NAME, EDIT_SURNAME, FIELD_SURNAME, \
    EDIT_PERS_GENDER, EDIT_GENDER_INTERNAL, FIELD_GENDER, EDIT_PHONE, FIELD_PHONE, EDIT_EMAIL, FIELD_EMAIL, \
    CHOOSE_FLIGHT, get_available_flights_menu, FLIGHT, get_luggage_menu, LUGGAGE, load_photo, get_random_available_seat, \
    generate_seats, SEAT_PAG, CHOOSE_SEAT, OCCUPIED, TICKETS, get_tickets_buttons, \
    get_simple_question_marcup, TICKET

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ–±'—î–∫—Ç—É
bot = telebot.TeleBot(os.environ.get('BOT_TOKEN'), parse_mode='Markdown')
provider_token = os.environ.get('STRIPE_API_KEY')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
dbmanager.init_db()

chat_cache = ChatCache()

user_surname_regex = "[0-9!@#$%^&()_+=\*\-~`{}\[\]:;\",\.?/\\|<>‚Ññ]+"
phone_regex = "[a-zA-Z–∞-—è–ê-–Ø–Ü—ñ–á—ó–Ñ!@#$%^&()_=\*\-~'`{}\[\]:;\",\.?/\\|<>‚Ññ]+"
email_regex = "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"

GENDER = {
    'M': '–ß–æ–ª–æ–≤—ñ–∫',
    'F': '–ñ—ñ–Ω–∫–∞'
}


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ start
@bot.message_handler(commands=[START])
def send_welcome(message):
    bot.send_message(message.chat.id, f'{message.chat.first_name}, –≤—ñ—Ç–∞—î–º–æ –í–∞—Å —É Flying –±–æ—Ç. –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º '
                                      f'–ø—Ä–∏–¥–±–∞—Ç–∏ –∞–≤—ñ–∞–∫–≤–∏—Ç–∫–∏‚úàÔ∏è')
    user = User(id=message.chat.id, save_info=False)
    UserService.create_user(user)
    main_menu(message)


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞
@bot.message_handler(commands=[HELP])
def send_help(message):
    bot.send_message(message.chat.id, '–¶–µ–π –±–æ—Ç –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–∫—ñ –∫–æ–º–∞–Ω–¥–∏: \n'
                                      '/start - –ø–æ—á–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç\n'
                                      '/help - –ø–µ—Ä–µ–ª—ñ–∫ –∫–æ–º–∞–Ω–¥, —è–∫—ñ –º—ñ—Å—Ç–∏—Ç—å –≤ —Å–æ–±—ñ –±–æ—Ç\n')


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(commands=[MAIN_MENU])
def main_menu(message):
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏üéÆ', reply_markup=get_main_menu())


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda callback: callback.data == MAIN_MENU)
def main_menu_callback(callback):
    main_menu(callback.message)


# –ü—Ä–æ–ø–æ–Ω—É—î –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
@bot.message_handler(commands=[PERSONAL_DATA_MENU])
def personal_data_menu(message):
    user = UserService.get_user_by_id(message.chat.id)
    if user is not None and user.save_info:
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏:',
                         reply_markup=get_personal_data_menu(True))
    else:
        bot.send_message(message.chat.id,
                         '–í–∏ –º–æ–∂–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, —â–æ–± –Ω–µ –≤–≤–æ–¥–∏—Ç–∏ —ó—Ö –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –∫—É–ø—ñ–≤–ª—ñ –∫–≤–∏—Ç–∫—ñ–≤üì•',
                         reply_markup=get_personal_data_menu(False))


# –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö
@bot.callback_query_handler(func=lambda callback: callback.data == PERSONAL_DATA_MENU)
def personal_data_callback(callback):
    personal_data_menu(callback.message)


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ
@bot.callback_query_handler(func=lambda callback: callback.data == CREATE_PERS_DATA)
def create_pers_data_callback(callback):
    bot.send_message(callback.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–∞—Ç—å:',
                     reply_markup=get_simple_question_marcup_with_text(EDIT_GENDER + ":M", '–ß–æ–ª–æ–≤—ñ—á–∞üë®‚Äçüíº',
                                                                       EDIT_GENDER + ":F", '–ñ—ñ–Ω–æ—á–∞üë©‚Äçüíº'))


#
@bot.callback_query_handler(func=lambda callback: callback.data.startswith(EDIT_GENDER))
def edit_gender_callback(callback):
    gender = get_param_from_command(callback.data)
    bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ —ñ–º\'—è:')
    user_info = UserInfo(gender=gender)
    chat_cache.put_pers_data(callback.message.chat.id, user_info)
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_enter_name)


def on_enter_name(message):
    name = message.text
    user_info = chat_cache.get_pers_data(message.chat.id)

    if len(name) < 2:
        bot.send_message(message.chat.id, '–Ü–º\'—è –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ –¥–≤–æ—Ö –ª—ñ—Ç–µ—Ä. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_name)
        return

    if re.search(user_surname_regex, name):
        bot.send_message(message.chat.id, '–Ü–º\'—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_name)
        return

    user_info.name = name
    chat_cache.put_pers_data(message.chat.id, user_info)
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:')
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, on_enter_surname)


def on_enter_surname(message):
    surname = message.text
    user_info = chat_cache.get_pers_data(message.chat.id)

    if len(surname) < 4:
        bot.send_message(message.chat.id, '–ü—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ 4 –ª—ñ—Ç–µ—Ä. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_surname)
        return

    if re.search(user_surname_regex, surname):
        bot.send_message(message.chat.id, '–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_surname)
        return

    user_info.surname = surname
    chat_cache.put_pers_data(message.chat.id, user_info)
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (+380):')
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, on_enter_phone_number)


def on_enter_phone_number(message):
    phone = message.text
    user_info = chat_cache.get_pers_data(message.chat.id)

    if len(phone) != 13:
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 12 —Ü–∏—Ñ—Ä —Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É +. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_phone_number)
        return

    if re.search(phone_regex, phone):
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª—ñ—Ç–µ—Ä –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, –æ–∫—Ä—ñ–º +. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_phone_number)
        return

    user_info.phone = phone
    chat_cache.put_pers_data(message.chat.id, user_info)
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à email:')
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, on_enter_email)


def on_enter_email(message):
    email = message.text
    user_info = chat_cache.get_pers_data(message.chat.id)

    if re.search(email_regex, email):
        user_info.email = email
        chat_cache.put_pers_data(message.chat.id, user_info)
        bot.send_message(message.chat.id, '–í–∏ –≤–≤–µ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:\n')
        bot.send_message(message.chat.id, f"*–Ü–º'—è*: {user_info.name}\n"
                                          f"*–ü—Ä—ñ–∑–≤–∏—â–µ*: {user_info.surname}\n\n"
                                          f"*–°—Ç–∞—Ç—å*: {GENDER[user_info.gender]}\n\n"
                                          f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*: {user_info.phone}\n"
                                          f"*Email*: {user_info.email}")
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ', reply_markup=get_save_pers_data_menu())
    else:
        bot.send_message(message.chat.id, '–ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π email. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_email)


@bot.callback_query_handler(func=lambda callback: callback.data == PRE_SAVE_EDIT_PERS_DATA)
def pre_save_menu_handler(callback):
    bot.send_message(callback.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ', reply_markup=get_save_pers_data_menu())


@bot.callback_query_handler(func=lambda callback: callback.data == SAVE_PERS_DATA)
def save_pers_info_callback(callback):
    try:
        user_info = chat_cache.get_pers_data(callback.message.chat.id)
        id = UserInfoService.create_user(user_info)
        chat_cache.rem_pers_data(callback.message.chat.id)
        user = UserService.get_user_by_id(callback.message.chat.id)
        user.user_info_id = id
        user.save_info = True
        UserService.update_user(user)
        bot.send_message(callback.message.chat.id, "–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ. üéâüéâüéâ")
        time.sleep(2)
        main_menu(callback.message)
    except:
        bot.send_message(callback.message.chat.id, "–£–ø—Å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –º–∏ –Ω–∞–¥ —Ü–∏–º –ø—Ä–∞—Ü—é—î–º–æ...")


@bot.callback_query_handler(func=lambda callback: callback.data == SEE_PERS_DATA)
def see_personal_data_callback(callback):
    see_personal_data(callback.message)


def see_personal_data(message):
    try:
        user_info = chat_cache.get_pers_data(message.chat.id)
    except:
        user_info = UserInfoService.get_user_info_by_user_id(message.chat.id)
    return bot.send_message(message.chat.id, "*–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:*\n\n"
                                             f"*–Ü–º'—è*: {user_info.name}\n"
                                             f"*–ü—Ä—ñ–∑–≤–∏—â–µ*: {user_info.surname}\n\n"
                                             f"*–°—Ç–∞—Ç—å*: {GENDER[user_info.gender]}\n\n"
                                             f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*: {user_info.phone}\n"
                                             f"*Email*: {user_info.email}")


def edit_personal_data(message, show, is_user_saved):
    if show:
        message_sent = see_personal_data(message)
        chat_cache.put_msg_to_edit(message.chat.id, message_sent.message_id)
    chat_cache.put_msg_to_del(message.chat.id, [])
    to_delete = bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥–∞–Ω—ñ, —è–∫—ñ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:',
                                 reply_markup=get_edit_personal_data_menu(is_user_saved))
    chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_PERS_DATA)
def edit_personal_data_callback(callback):
    edit_personal_data(callback.message, True, True)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_NAME)
def edit_name_callback(callback):
    to_delete = bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º\'—è:')
    chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_edit_name)


def on_edit_name(message):
    name = message.text
    chat_cache.add_msg_to_del(message.chat.id, message.message_id)

    if len(name) < 2:
        to_delete = bot.send_message(message.chat.id, '–Ü–º\'—è –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ –¥–≤–æ—Ö –ª—ñ—Ç–µ—Ä. '
                                                             '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_name)
        return

    if re.search(user_surname_regex, name):
        to_delete = bot.send_message(message.chat.id, '–Ü–º\'—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                                                      '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_name)
        return
    edit_field(message, FIELD_NAME, name)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_SURNAME)
def edit_surname_callback(callback):
    to_delete = bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø—Ä—ñ–∑–≤–∏—â–µ:')
    chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_edit_surname)


def on_edit_surname(message):
    surname = message.text
    chat_cache.add_msg_to_del(message.chat.id, message.message_id)
    if len(surname) < 4:
        to_delete = bot.send_message(message.chat.id, '–ü—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ 4 –ª—ñ—Ç–µ—Ä. '
                                                             '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_surname)
        return

    if re.search(user_surname_regex, surname):
        to_delete = bot.send_message(message.chat.id,
                                            '–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                                            '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_surname)
        return

    edit_field(message, FIELD_SURNAME, surname)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_PERS_GENDER)
def edit_surname_callback(callback):
    to_delete = bot.send_message(callback.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å:',
                                        reply_markup=get_simple_question_marcup_with_text(EDIT_GENDER_INTERNAL + ":M",
                                                                                          '–ß–æ–ª–æ–≤—ñ—á–∞üë®‚Äçüíº',
                                                                                          EDIT_GENDER_INTERNAL + ":F",
                                                                                          '–ñ—ñ–Ω–æ—á–∞üë©‚Äçüíº'))
    chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith(EDIT_GENDER_INTERNAL))
def edit_gender_internal_callback(callback):
    gender = get_param_from_command(callback.data)
    chat_cache.add_msg_to_del(callback.message.chat.id, callback.message.message_id)
    edit_field(callback.message, FIELD_GENDER, gender)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_PHONE)
def edit_phone_callback(callback):
    to_delete = bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
    chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_edit_phone)


def on_edit_phone(message):
    phone = message.text
    chat_cache.add_msg_to_del(message.chat.id, message.message_id)

    if len(phone) != 13:
        to_delete = bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 12 —Ü–∏—Ñ—Ä —Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É +. '
                                              '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_phone)
        return

    if re.search(phone_regex, phone):
        to_delete = bot.send_message(message.chat.id,
                                            '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª—ñ—Ç–µ—Ä –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, –æ–∫—Ä—ñ–º +. '
                                            '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_phone)
        return

    edit_field(message, FIELD_PHONE, phone)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_EMAIL)
def edit_email_callback(callback):
    to_delete = bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å email:')
    chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_edit_email)


def on_edit_email(message):
    email = message.text
    chat_cache.add_msg_to_del(message.chat.id, message.message_id)

    if not re.search(email_regex, email):
        to_delete = bot.send_message(message.chat.id, '–ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π email. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        chat_cache.add_msg_to_del(to_delete.chat.id, to_delete.message_id)
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_email)
        return

    edit_field(message, FIELD_EMAIL, email)


def edit_field(message, field, value):
    try:
        user_info = chat_cache.get_pers_data(message.chat.id)
        setattr(user_info, field, value)
        chat_cache.put_pers_data(message.chat.id, user_info)
        delete_edit_messages(message)
        edit_personal_data(message, False, False)
    except:
        user_info = UserInfoService.get_user_info_by_user_id(message.chat.id)
        setattr(user_info, field, value)
        UserInfoService.update_user(user_info)
        delete_edit_messages(message)
        edit_personal_data(message, False, True)


def delete_edit_messages(message):
    try:
        user_info = chat_cache.get_pers_data(message.chat.id)
    except:
        user_info = UserInfoService.get_user_info_by_user_id(message.chat.id)
    try:
        edit_msg_id = chat_cache.get_msg_to_edit(message.chat.id)
        delete = chat_cache.get_msgs_to_delete(message.chat.id)
        bot.edit_message_text("*–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:*\n\n"
                              f"*–Ü–º'—è*: {user_info.name}\n"
                              f"*–ü—Ä—ñ–∑–≤–∏—â–µ*: {user_info.surname}\n\n"
                              f"*–°—Ç–∞—Ç—å*: {GENDER[user_info.gender]}\n\n"
                              f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*: {user_info.phone}\n"
                              f"*Email*: {user_info.email}", message.chat.id, edit_msg_id)
        for rem in delete:
            bot.delete_message(message.chat.id, rem)
        chat_cache.put_msg_to_del(message.chat.id, [])
    except:
        return None


@bot.message_handler(commands=[CHOOSE_FLIGHT])
def choose_flight_handler(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å,–±—É–¥—å –ª–∞—Å–∫–∞, –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:')
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, on_enter_city_departure)


@bot.callback_query_handler(func=lambda callback: callback.data == CHOOSE_FLIGHT)
def choose_flight_callback(callback):
    choose_flight_handler(callback.message)


def on_enter_city_departure(message):
    city = message.text

    if len(city) < 2:
        bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ –¥–≤–æ—Ö –ª—ñ—Ç–µ—Ä. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_city_departure)
        return

    if re.search(user_surname_regex, city):
        bot.send_message(message.chat.id,
                         '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                         '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_city_departure)
        return

    flights_with_city = SeatService.with_available_seats(FlightService.get_with_departure_city(city))

    if flights_with_city:
        chat_cache.put_flight(message.chat.id, Flight(departure=city))
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –ø—Ä–∏–±—É—Ç—Ç—è:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_city_arrival)
    else:
        bot.send_message(message.chat.id, '–ù–∞ –∂–∞–ª—å, —Ä–µ–π—Å—ñ–≤ –∑–∞ –æ–±—Ä–∞–Ω–∏–º –Ω–∞–ø—Ä—è–º–∫–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_city_departure)


def on_enter_city_arrival(message):
    city = message.text

    if len(city) < 2:
        bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ –¥–≤–æ—Ö –ª—ñ—Ç–µ—Ä. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_city_arrival)
        return

    if re.search(user_surname_regex, city):
        bot.send_message(message.chat.id,
                         '–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                         '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_city_arrival)
        return

    flight = chat_cache.get_flight(message.chat.id)
    available_flights = FlightService.get_by_flight(Flight(departure=flight.departure, arrival=city))
    available_flights = SeatService.with_available_seats(available_flights)

    if available_flights:
        flight.arrival = city
        chat_cache.put_flight(message.chat.id, flight)
        calendar, step = DetailedTelegramCalendar().build()
        bot.send_message(message.chat.id, f"–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É: {LSTEP[step]}", reply_markup=calendar)
    else:
        bot.send_message(message.chat.id,
                         f'–ù–∞ –∂–∞–ª—å, —Ä–µ–π—Å—ñ–≤ –∑–∞ –æ–±—Ä–∞–Ω–∏–º –Ω–∞–ø—Ä—è–º–∫–æ–º {flight.departure} -> {city} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ...')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_city_arrival)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def select_date_callback(callback):
    result, key, step = DetailedTelegramCalendar().process(callback.data)

    if not result and key:
        bot.edit_message_text(f"Select {LSTEP[step]}",
                              callback.message.chat.id,
                              callback.message.message_id,
                              reply_markup=key)
    elif result:
        flight = chat_cache.get_flight(callback.message.chat.id)
        available_flights = FlightService.get_by_flight(Flight(departure=flight.departure, arrival=flight.arrival,
                                                               departure_date_time=result))
        available_flights = SeatService.with_available_seats(available_flights)

        if available_flights:
            bot.send_message(callback.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Ä–µ–π—Å:',
                             reply_markup=get_available_flights_menu(available_flights, False))
        else:
            available_flights = FlightService.get_by_flight(Flight(departure=flight.departure, arrival=flight.arrival,
                                                                   departure_date_time=result), False)
            available_flights = SeatService.with_available_seats(available_flights)
            if available_flights:
                bot.send_message(callback.message.chat.id,
                                 '–ù–∞ –∂–∞–ª—å, –Ω–∞ –≤–∏–±—Ä–∞–Ω—É –≤–∞–º–∏ –¥–∞—Ç—É —Ä–µ–π—Å—ñ–≤ –Ω–µ–º–∞—î.\n–ù–∞–π–±–ª–∏–∂—á—ñ —Ä–µ–π—Å–∏:',
                                 reply_markup=get_available_flights_menu(available_flights, True))
            else:
                bot.send_message(callback.message.chat.id,
                                 '–ù–∞ –∂–∞–ª—å, –Ω–∞ –≤–∏–±—Ä–∞–Ω—É –≤–∞–º–∏ –¥–∞—Ç—É —Ä–µ–π—Å—ñ–≤ –Ω–µ–º–∞—î...')


@bot.callback_query_handler(func=lambda callback: callback.data.startswith(FLIGHT))
def flight_callback(callback):
    id = get_param_from_command(callback.data)
    flight = FlightService.get_by_id(id)
    chat_cache.put_flight(callback.message.chat.id, flight)

    chat_cache.put_seat(callback.message.chat.id, Seat(flight_id=id))
    bot.send_message(callback.message.chat.id, '*–û–±–µ—Ä—ñ—Ç—å –±–∞–≥–∞–∂*:\n\n'
                                               'Basic - –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞ (40—Ö20—Ö25).\n\n'
                                               'Regular - 2 —Å—É–º–∫–∏ —Ä—É—á–Ω–æ—ó –ø–æ–∫–ª–∞–∂—ñ ( 1 —Å—É–º–∫–∞ —Ä—É—á–Ω–æ—ó –ø–æ–∫–ª–∞–∂—ñ —Ç–∞ –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞ + –ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–µ –º—ñ—Å—Ü–µ.\n\n'
                                               'Plus - 1 –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞ + 20 –∫–≥ –±–∞–≥–∞–∂ + –ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–µ –º—ñ—Å—Ü–µ.',
                     reply_markup=get_luggage_menu(flight))


@bot.callback_query_handler(func=lambda callback: callback.data.startswith(LUGGAGE))
def luggage_chosen_callback(callback):
    luggage_type = get_param_from_command(callback.data)
    seat = chat_cache.get_seat(callback.message.chat.id)

    if luggage_type == 'REGULAR':
        seat.luggage_regular = True

    if luggage_type == 'PLUS':
        seat.luggage_plus = True

    chat_cache.put_seat(callback.message.chat.id, seat)
    flight = FlightService.get_by_id(seat.flight_id)

    bot.send_photo(callback.message.chat.id, load_photo(flight.plane.layout))

    if not seat.luggage_regular and not seat.luggage_plus:
        random_seat = get_random_available_seat(flight)
        seat.number = random_seat.number
        chat_cache.put_seat(callback.message.chat.id, seat)
        bot.send_message(callback.message.chat.id, f'–í–∞—à–µ –º—ñ—Å—Ü–µ: {seat.number}')
    else:
        chat_cache.put_chs_seat_pag_state(callback.message.chat.id, ChooseSeatState(current=1, page_count=18,
                                                                                    flight=flight))
        pag_state = chat_cache.get_chs_seat_pag_state(callback.message.chat.id)
        to_edit = bot.send_message(callback.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó:',
                                   reply_markup=pag_state.get_page_btns(generate_seats(flight)))
        chat_cache.put_msg_to_edit(callback.message.chat.id, to_edit.message_id)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith(SEAT_PAG))
def seat_pagination_callback(callback):
    action = get_param_from_command(callback.data)
    pag_state = chat_cache.get_chs_seat_pag_state(callback.message.chat.id)
    pag_state.apply_action(action)
    chat_cache.put_chs_seat_pag_state(callback.message.chat.id, pag_state)
    edit_msg_id = chat_cache.get_msg_to_edit(callback.message.chat.id)
    flight = chat_cache.get_flight(callback.message.chat.id)
    if pag_state.is_changed():
        bot.edit_message_text('–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó',
                              callback.message.chat.id, edit_msg_id,
                              reply_markup=pag_state.get_page_btns(generate_seats(flight)))


@bot.callback_query_handler(func=lambda callback: callback.data.startswith(CHOOSE_SEAT))
def choose_seat_callback(callback):
    place_number = get_param_from_command(callback.data)

    if place_number.endswith(OCCUPIED):
        bot.send_message(callback.message.chat.id, '–í–∏–±–∞—á—Ç–µ, –∞–ª–µ —Ü–µ –º—ñ—Å—Ü–µ –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ, –æ–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—à–µ')
        return

    chat_cache.put_msg_to_edit(callback.message.chat.id, None)
    chat_cache.put_chs_seat_pag_state(callback.message.chat.id, None)
    seat = chat_cache.get_seat(callback.message.chat.id)

    seat.number = place_number

    user = UserService.get_user_by_id(callback.message.chat.id)

    if user.save_info:
        seat.user_info_id = user.user_info_id
        show_pre_buy_data(callback.message)
    else:

        bot.send_message(callback.message.chat.id, 'Hello mather-fucker')

    chat_cache.put_seat(callback.message.chat.id, seat)


def show_pre_buy_data(message):
    seat = chat_cache.get_seat(message.chat.id)

    flight = chat_cache.get_flight(message.chat.id)
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≥–ª—è–¥ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n")
    seat_model = SeatModel(number=seat.number, luggage_regular=seat.luggage_regular,
                               luggage_plus=seat.luggage_plus, flight=flight)
    luggage = '–†—É—á–Ω–∞ –ø–æ–∫–ª–∞–∂–∞'
    cost = flight.cost_base

    if seat.luggage_regular:
        luggage = '2 —Å—É–º–∫–∏ —Ä—É—á–Ω–æ—ó –ø–æ–∫–ª–∞–∂—ñ (1 —Å—É–º–∫–∞ —Ä—É—á–Ω–æ—ó –ø–æ–∫–ª–∞–∂—ñ —Ç–∞ –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞)'
        cost += flight.cost_regular

    if seat.luggage_plus:
        luggage = '1 –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞ + 20 –∫–≥ –±–∞–≥–∞–∂'
        cost += flight.cost_plus

    show_ticket_info(seat_model, message)

    bot.send_invoice(message.chat.id,
                     title='–û–ø–ª–∞—Ç–∞ –∫–≤–∏—Ç–∫—ñ–≤',
                     description=f'–†–µ–π—Å: {flight.departure} {flight.departure_date_time.strftime("%d.%m.%Y %H:%M")} '
                                 f'-> {flight.arrival} {flight.arrival_date_time.strftime("%d.%m.%Y %H:%M")}',
                     currency='usd',
                     prices=[LabeledPrice(label=f'–ö–≤–∏—Ç–æ–∫: {seat.number}, –±–∞–≥–∞–∂: {luggage}', amount=int(cost)*100)],
                     provider_token=provider_token,
                     is_flexible=False,
                     invoice_payload='FlyBot')


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–Ü–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è –≤–∏–∫—Ä–∞—Å—Ç–∏ CVV –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏, –∞–ª–µ –º–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ö–∏—Å—Ç–∏–ª–∏ –≤–∞—à—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ, "
                                                 " –°–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –Ω–µ–≤–µ–ª–∏–∫–∏–π –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫.")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    seat = chat_cache.get_seat(message.chat.id)
    flight = chat_cache.get_flight(message.chat.id)
    seat.id = SeatService.create_seat(seat)
    ticket = Ticket(plane_id=flight.plane.id, flight_id=flight.id, seat_id=seat.id, reserve_number=uuid.uuid4())
    user_info = UserInfoService.get_user_by_id(seat.user_info_id)
    ticket.id = TicketService.create_ticket(ticket)
    user = UserService.get_user_by_id(message.chat.id)
    UserTicketService.create_user_ticket(user, ticket)

    chat_cache.put_seat(message.chat.id, None)
    chat_cache.put_flight(message.chat.id, None)
    chat_cache.put_chs_seat_pag_state(message.chat.id, None)
    chat_cache.put_msg_to_edit(message.chat.id, None)

    bot.send_message(message.chat.id,
                     "–î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ `{} {}` —É—Å–ø—ñ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ!".format(
                         message.successful_payment.total_amount / 100, message.successful_payment.currency),
                     parse_mode='Markdown')

    luggage = '–†—É—á–Ω–∞ –ø–æ–∫–ª–∞–∂–∞'

    if seat.luggage_regular:
        luggage = '2 —Å—É–º–∫–∏ —Ä—É—á–Ω–æ—ó –ø–æ–∫–ª–∞–∂—ñ (1 —Å—É–º–∫–∞ —Ä—É—á–Ω–æ—ó –ø–æ–∫–ª–∞–∂—ñ —Ç–∞ –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞)'

    if seat.luggage_plus:
        luggage = '1 –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞ + 20 –∫–≥ –±–∞–≥–∞–∂'

    bot.send_message(message.chat.id, f"–í–∞—à –Ω–æ–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó: `{ticket.reserve_number}`\n\n"
                                      f"–†–µ–π—Å: {flight.departure} -> {flight.arrival}\n\n"
                                      f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {flight.departure_date_time.strftime("%d.%m.%Y %H:%M")}\n"
                                      f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è: {flight.arrival_date_time.strftime("%d.%m.%Y %H:%M")}\n"
                                      f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–ª—å–æ—Ç—É: {flight.duration} –≥–æ–¥.\n\n"
                                      f"–õ—ñ—Ç–∞–∫: {flight.plane.model}\n\n"
                                      f"–í–∞—à–µ –º—ñ—Å—Ü–µ: {seat.number}\n"
                                      f"–ë–∞–≥–∞–∂: {luggage}\n\n"
                                      f"–ü–∞—Å–∞–∂–∏—Ä: {user_info.name} {user_info.surname}\n")


@bot.message_handler(commands=[TICKETS])
def tickets_handler(message):
    tickets = UserTicketService.get_user_tickets(message.chat.id)
    if tickets:
        reply_marcup = get_tickets_buttons(tickets)
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –∫–≤–∏—Ç–æ–∫:', reply_markup=reply_marcup)
    else:
        bot.send_message(message.chat.id, '–ù–∞ –∂–∞–ª—å, –≤–∏ —â–µ –Ω–µ –ø—Ä–∏–¥–±–∞–ª–∏ –∂–æ–¥–Ω–∏—Ö –∫–≤–∏—Ç–∫—ñ–≤. –ë–∞–∂–∞—î—Ç–µ –æ–±—Ä–∞—Ç–∏ —Ä–µ–π—Å?',
                         reply_markup=get_simple_question_marcup(CHOOSE_FLIGHT, MAIN_MENU))


@bot.callback_query_handler(func=lambda callback: callback.data == TICKETS)
def tickets_callback(callback):
    tickets_handler(callback.message)


@bot.callback_query_handler(func=lambda callback: callback.data.startswith(TICKET))
def ticket_callback(callback):
    ticket_id = get_param_from_command(callback.data)
    ticket = TicketService.get_ticket(ticket_id)
    seat = SeatService.get_by_id(ticket.seat_id)
    show_ticket_info(seat, callback.message)


def show_ticket_info(seat, message):
    bot.send_message(message.chat.id, f"–†–µ–π—Å: {seat.flight.departure} -> {seat.flight.arrival}\n\n"
                                      f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {seat.flight.departure_date_time.strftime("%d.%m.%Y %H:%M")}\n"
                                      f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è: {seat.flight.arrival_date_time.strftime("%d.%m.%Y %H:%M")}\n"
                                      f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–ª—å–æ—Ç—É: {seat.flight.duration} –≥–æ–¥.\n\n"
                                      f"–õ—ñ—Ç–∞–∫: {seat.flight.plane.model}\n\n")

    bot.send_photo(message.chat.id, load_photo(seat.flight.plane.layout))

    luggage = '–†—É—á–Ω–∞ –ø–æ–∫–ª–∞–∂–∞'
    cost = seat.flight.cost_base

    if seat.luggage_regular:
        luggage = '2 —Å—É–º–∫–∏ —Ä—É—á–Ω–æ—ó –ø–æ–∫–ª–∞–∂—ñ (1 —Å—É–º–∫–∞ —Ä—É—á–Ω–æ—ó –ø–æ–∫–ª–∞–∂—ñ —Ç–∞ –æ–¥–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞)'
        cost += seat.flight.cost_regular

    if seat.luggage_plus:
        luggage = '1 –º–∞–ª–µ–Ω—å–∫–∞ —Å—É–º–∫–∞ + 20 –∫–≥ –±–∞–≥–∞–∂'
        cost += seat.flight.cost_plus

    bot.send_message(message.chat.id, f"–í–∞—à–µ –º—ñ—Å—Ü–µ: {seat.number}\n"
                                      f"–ë–∞–≥–∞–∂: {luggage}")
    see_personal_data(message)


@bot.message_handler(commands=[SUPPORT])
def support_handler(message):
    bot.send_message(message.chat.id, '–ó–∞–ª–∏—à–∏–ª–∏—Å—å –ø–∏—Ç–∞–Ω–Ω—è?\n'
                                      '–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–º–µ—Ä–æ–º:\n'
                                      '`+380977070505`')


@bot.callback_query_handler(func=lambda callback: callback.data == SUPPORT)
def support_callback(callback):
    support_handler(callback.message)


bot.polling(none_stop=True)
