import os
import re
import time

import telebot

import db.db_init as dbmanager
from models.User import User
from models.UserInfo import UserInfo
from service.user_info_service import UserInfoService
from service.user_service import UserService
from util.utils import get_personal_data_menu, get_main_menu, START, HELP, MAIN_MENU, PERSONAL_DATA_MENU, SUPPORT, \
    CREATE_PERS_DATA, EDIT_GENDER, get_simple_question_marcup_with_text, \
    get_save_pers_data_menu, SAVE_PERS_DATA, get_param_from_command, SEE_PERS_DATA, EDIT_PERS_DATA, \
    PRE_SAVE_EDIT_PERS_DATA, get_edit_personal_data_menu, EDIT_NAME, FIELD_NAME, EDIT_SURNAME, FIELD_SURNAME, \
    EDIT_PERS_GENDER, EDIT_GENDER_INTERNAL, FIELD_GENDER, EDIT_PHONE, FIELD_PHONE, EDIT_EMAIL, FIELD_EMAIL

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ–±'—î–∫—Ç—É
bot = telebot.TeleBot(os.environ.get('BOT_TOKEN'), parse_mode='Markdown')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
dbmanager.init_db()

personal_data = {}
message_to_edit = {}
messages_to_delete = {}


user_surname_regex = "[0-9!@#$%^&()_+=\*\-~`{}\[\]:;\",\.?/\\|<>‚Ññ]+"
phone_regex = "[a-zA-Z–∞-—è–ê-–Ø–Ü—ñ–á—ó–Ñ!@#$%^&()_=\*\-~'`{}\[\]:;\",\.?/\\|<>‚Ññ]+"
email_regex = "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"

GENDER = {
    'M': '–ß–æ–ª–æ–≤—ñ–∫',
    'F': '–ñ—ñ–Ω–∫–∞'
}


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ start
@bot.message_handler(commands=[START])
def send_welcome(message):
    bot.send_message(message.chat.id, f'{message.chat.first_name}, –≤—ñ—Ç–∞—î–º–æ –í–∞—Å —É Flying –±–æ—Ç. –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –í–∞–º '
                                      f'–ø—Ä–∏–¥–±–∞—Ç–∏ –∞–≤—ñ–∞–∫–≤–∏—Ç–∫–∏‚úàÔ∏è')
    main_menu(message)


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞
@bot.message_handler(commands=[HELP])
def send_help(message):
    bot.send_message(message.chat.id, '–¶–µ–π –±–æ—Ç –º—ñ—Å—Ç–∏—Ç—å —Ç–∞–∫—ñ –∫–æ–º–∞–Ω–¥–∏: \n'
                                      '/start - –ø–æ—á–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–æ—Ç\n'
                                      '/help - –ø–µ—Ä–µ–ª—ñ–∫ –∫–æ–º–∞–Ω–¥, —è–∫—ñ –º—ñ—Å—Ç–∏—Ç—å –≤ —Å–æ–±—ñ –±–æ—Ç\n')


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(commands=[MAIN_MENU])
def main_menu(message):
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏üéÆ', reply_markup=get_main_menu())


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda callback: callback.data == MAIN_MENU)
def main_menu_callback(callback):
    main_menu(callback.message)


# –ü—Ä–æ–ø–æ–Ω—É—î –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ –ø–æ–∫–∞–∑—É—î –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
@bot.message_handler(commands=[PERSONAL_DATA_MENU])
def personal_data_menu(message):
    user = UserService.get_user_by_id(message.chat.id)
    if user is not None and user.save_info:
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏:',
                         reply_markup=get_personal_data_menu(True))
    else:
        bot.send_message(message.chat.id,
                         '–í–∏ –º–æ–∂–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ, —â–æ–± –Ω–µ –≤–≤–æ–¥–∏—Ç–∏ —ó—Ö –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –∫—É–ø—ñ–≤–ª—ñ –∫–≤–∏—Ç–∫—ñ–≤üì•',
                         reply_markup=get_personal_data_menu(False))


# –ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö
@bot.callback_query_handler(func=lambda callback: callback.data == PERSONAL_DATA_MENU)
def personal_data_callback(callback):
    personal_data_menu(callback.message)


# –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–±–æ—Ä—É —Å—Ç–∞—Ç—ñ
@bot.callback_query_handler(func=lambda callback: callback.data == CREATE_PERS_DATA)
def create_pers_data_callback(callback):
    bot.send_message(callback.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å—Ç–∞—Ç—å:',
                     reply_markup=get_simple_question_marcup_with_text(EDIT_GENDER + ":M", '–ß–æ–ª–æ–≤—ñ—á–∞üë®‚Äçüíº',
                                                                       EDIT_GENDER + ":F", '–ñ—ñ–Ω–æ—á–∞üë©‚Äçüíº'))


#
@bot.callback_query_handler(func=lambda callback: callback.data.startswith(EDIT_GENDER))
def edit_gender_callback(callback):
    gender = get_param_from_command(callback.data)
    bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ —ñ–º\'—è:')
    user_info = UserInfo(gender=gender)
    personal_data[callback.message.chat.id] = user_info
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_enter_name)


def on_enter_name(message):
    name = message.text
    user_info = personal_data[message.chat.id]

    if len(name) < 2:
        bot.send_message(message.chat.id, '–Ü–º\'—è –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ –¥–≤–æ—Ö –ª—ñ—Ç–µ—Ä. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_name)
        return

    if re.search(user_surname_regex, name):
        bot.send_message(message.chat.id, '–Ü–º\'—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_name)
        return

    user_info.name = name
    personal_data[message.chat.id] = user_info
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:')
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, on_enter_surname)


def on_enter_surname(message):
    surname = message.text
    user_info = personal_data[message.chat.id]

    if len(surname) < 4:
        bot.send_message(message.chat.id, '–ü—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ 4 –ª—ñ—Ç–µ—Ä. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_surname)
        return

    if re.search(user_surname_regex, surname):
        bot.send_message(message.chat.id, '–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_surname)
        return

    user_info.surname = surname
    personal_data[message.chat.id] = user_info
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (+380):')
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, on_enter_phone_number)


def on_enter_phone_number(message):
    phone = message.text
    user_info = personal_data[message.chat.id]

    if len(phone) != 13:
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 12 —Ü–∏—Ñ—Ä —Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É +. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_phone_number)
        return

    if re.search(phone_regex, phone):
        bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª—ñ—Ç–µ—Ä –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, –æ–∫—Ä—ñ–º +. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_phone_number)
        return

    user_info.phone = phone
    personal_data[message.chat.id] = user_info
    bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –í–∞—à email:')
    bot.clear_step_handler_by_chat_id(message.chat.id)
    bot.register_next_step_handler(message, on_enter_email)


def on_enter_email(message):
    email = message.text
    user_info = personal_data[message.chat.id]

    if re.search(email_regex, email):
        user_info.email = email
        personal_data[message.chat.id] = user_info
        bot.send_message(message.chat.id, '–í–∏ –≤–≤–µ–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ:\n')
        bot.send_message(message.chat.id, f"*–Ü–º'—è*: {user_info.name}\n"
                                          f"*–ü—Ä—ñ–∑–≤–∏—â–µ*: {user_info.surname}\n\n"
                                          f"*–°—Ç–∞—Ç—å*: {GENDER[user_info.gender]}\n\n"
                                          f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*: {user_info.phone}\n"
                                          f"*Email*: {user_info.email}")
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ', reply_markup=get_save_pers_data_menu())
    else:
        bot.send_message(message.chat.id, '–ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π email. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_enter_email)


@bot.callback_query_handler(func=lambda callback: callback.data == PRE_SAVE_EDIT_PERS_DATA)
def pre_save_menu_handler(callback):
    bot.send_message(callback.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ', reply_markup=get_save_pers_data_menu())


@bot.callback_query_handler(func=lambda callback: callback.data == SAVE_PERS_DATA)
def save_pers_info_callback(callback):
    try:
        user_info = personal_data[callback.message.chat.id]
        id = UserInfoService.create_user(user_info)
        del personal_data[callback.message.chat.id]
        user = User(id=callback.message.chat.id, user_info_id=id, save_info=True)
        UserService.create_user(user)
        bot.send_message(callback.message.chat.id, "–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ. üéâüéâüéâ")
        time.sleep(2)
        main_menu(callback.message)
    except:
        bot.send_message(callback.message.chat.id, "–£–ø—Å, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –º–∏ –Ω–∞–¥ —Ü–∏–º –ø—Ä–∞—Ü—é—î–º–æ...")


@bot.callback_query_handler(func=lambda callback: callback.data == SEE_PERS_DATA)
def see_personal_data_callback(callback):
    see_personal_data(callback.message)


def see_personal_data(message):
    try:
        user_info = personal_data[message.chat.id]
    except:
        user_info = UserInfoService.get_user_info_by_user_id(message.chat.id)
    return bot.send_message(message.chat.id, "*–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:*\n\n"
                                      f"*–Ü–º'—è*: {user_info.name}\n"
                                      f"*–ü—Ä—ñ–∑–≤–∏—â–µ*: {user_info.surname}\n\n"
                                      f"*–°—Ç–∞—Ç—å*: {GENDER[user_info.gender]}\n\n"
                                      f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*: {user_info.phone}\n"
                                      f"*Email*: {user_info.email}")


def edit_personal_data(message, show, is_user_saved):
    if show:
        message_sent = see_personal_data(message)
        message_to_edit[message.chat.id] = message_sent.message_id
    messages_to_delete[message.chat.id] = []
    add_delete_message(bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –¥–∞–Ω—ñ, —è–∫—ñ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:',
                                                                reply_markup=get_edit_personal_data_menu(is_user_saved)))


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_PERS_DATA)
def edit_personal_data_callback(callback):
    edit_personal_data(callback.message, True, True)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_NAME)
def edit_name_callback(callback):
    add_delete_message(bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º\'—è:'))
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_edit_name)


def on_edit_name(message):
    name = message.text
    add_delete_message(message)

    if len(name) < 2:
        add_delete_message(bot.send_message(message.chat.id, '–Ü–º\'—è –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ –¥–≤–æ—Ö –ª—ñ—Ç–µ—Ä. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:'))
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_name)
        return

    if re.search(user_surname_regex, name):
        add_delete_message(bot.send_message(message.chat.id, '–Ü–º\'—è –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:'))
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_name)
        return
    edit_field(message, FIELD_NAME, name)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_SURNAME)
def edit_surname_callback(callback):
    add_delete_message(bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø—Ä—ñ–∑–≤–∏—â–µ:'))
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_edit_surname)


def on_edit_surname(message):
    surname = message.text
    add_delete_message(message)

    if len(surname) < 4:
        add_delete_message(bot.send_message(message.chat.id, '–ü—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω–æ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ö–æ—á–∞ –± –∑ 4 –ª—ñ—Ç–µ—Ä. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:'))
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_surname)
        return

    if re.search(user_surname_regex, surname):
        add_delete_message(bot.send_message(message.chat.id, '–ü—Ä—ñ–∑–≤–∏—â–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—É. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:'))
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_surname)
        return

    edit_field(message, FIELD_SURNAME, surname)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_PERS_GENDER)
def edit_surname_callback(callback):
    add_delete_message(bot.send_message(callback.message.chat.id, '–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—å:',
                                        reply_markup=get_simple_question_marcup_with_text(EDIT_GENDER_INTERNAL + ":M", '–ß–æ–ª–æ–≤—ñ—á–∞üë®‚Äçüíº',
                                                                                          EDIT_GENDER_INTERNAL + ":F", '–ñ—ñ–Ω–æ—á–∞üë©‚Äçüíº')))


@bot.callback_query_handler(func=lambda callback: callback.data.startswith(EDIT_GENDER_INTERNAL))
def edit_gender_internal_callback(callback):
    gender = get_param_from_command(callback.data)
    add_delete_message(callback.message)
    edit_field(callback.message, FIELD_GENDER, gender)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_PHONE)
def edit_phone_callback(callback):
    add_delete_message(bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:'))
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_edit_phone)


def on_edit_phone(message):
    phone = message.text
    add_delete_message(message)

    if len(phone) != 13:
        add_delete_message(bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 12 —Ü–∏—Ñ—Ä —Ç–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É +. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:'))
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_phone)
        return

    if re.search(phone_regex, phone):
        add_delete_message(bot.send_message(message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ª—ñ—Ç–µ—Ä –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, –æ–∫—Ä—ñ–º +. '
                                          '–°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:'))
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_phone)
        return

    edit_field(message, FIELD_PHONE, phone)


@bot.callback_query_handler(func=lambda callback: callback.data == EDIT_EMAIL)
def edit_email_callback(callback):
    add_delete_message(bot.send_message(callback.message.chat.id, '–í–≤–µ–¥—ñ—Ç—å email:'))
    bot.clear_step_handler_by_chat_id(callback.message.chat.id)
    bot.register_next_step_handler(callback.message, on_edit_email)


def on_edit_email(message):
    email = message.text
    add_delete_message(message)

    if not re.search(email_regex, email):
        add_delete_message(bot.send_message(message.chat.id, '–ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π email. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑:'))
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.register_next_step_handler(message, on_edit_email)
        return

    edit_field(message, FIELD_EMAIL, email)


def edit_field(message, field, value):
    try:
        user_info = personal_data[message.chat.id]
        setattr(user_info, field, value)
        personal_data[message.chat.id] = user_info
        delete_edit_messages(message)
        edit_personal_data(message, False, False)
    except:
        user_info = UserInfoService.get_user_info_by_user_id(message.chat.id)
        setattr(user_info, field, value)
        UserInfoService.update_user(user_info)
        delete_edit_messages(message)
        edit_personal_data(message, False, True)


def add_delete_message(message):
    messages_to_delete[message.chat.id].append(message.message_id)


def delete_edit_messages(message):
    try :
        user_info = personal_data[message.chat.id]
    except:
        user_info = UserInfoService.get_user_info_by_user_id(message.chat.id)
    try:
        edit_msg_id = message_to_edit[message.chat.id]
        delete = messages_to_delete[message.chat.id]
        bot.edit_message_text("*–í–∞—à—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ:*\n\n"
                              f"*–Ü–º'—è*: {user_info.name}\n"
                              f"*–ü—Ä—ñ–∑–≤–∏—â–µ*: {user_info.surname}\n\n"
                              f"*–°—Ç–∞—Ç—å*: {GENDER[user_info.gender]}\n\n"
                              f"*–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É*: {user_info.phone}\n"
                              f"*Email*: {user_info.email}", message.chat.id, edit_msg_id)
        for rem in delete:
            bot.delete_message(message.chat.id, rem)
        del messages_to_delete[message.chat.id]
        messages_to_delete[message.chat.id] = []
    except:
        return None


@bot.callback_query_handler(func=lambda callback: callback.data == SUPPORT)
def support_callback(callback):
    bot.send_message(callback.message.chat.id, '–ó–∞–ª–∏—à–∏–ª–∏—Å—å –ø–∏—Ç–∞–Ω–Ω—è?\n'
                                               '–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–º–µ—Ä–æ–º:\n'
                                               '`+380977070505`')


bot.polling(none_stop=True)
